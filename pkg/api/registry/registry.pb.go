// Code generated by protoc-gen-go. DO NOT EDIT.
// source: registry.proto

package registry

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NetworkService struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Payload              string   `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	Matches              []*Match `protobuf:"bytes,3,rep,name=matches,proto3" json:"matches,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkService) Reset()         { *m = NetworkService{} }
func (m *NetworkService) String() string { return proto.CompactTextString(m) }
func (*NetworkService) ProtoMessage()    {}
func (*NetworkService) Descriptor() ([]byte, []int) {
	return fileDescriptor_41af05d40a615591, []int{0}
}

func (m *NetworkService) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkService.Unmarshal(m, b)
}
func (m *NetworkService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkService.Marshal(b, m, deterministic)
}
func (m *NetworkService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkService.Merge(m, src)
}
func (m *NetworkService) XXX_Size() int {
	return xxx_messageInfo_NetworkService.Size(m)
}
func (m *NetworkService) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkService.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkService proto.InternalMessageInfo

func (m *NetworkService) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NetworkService) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *NetworkService) GetMatches() []*Match {
	if m != nil {
		return m.Matches
	}
	return nil
}

type Match struct {
	SourceSelector       map[string]string `protobuf:"bytes,1,rep,name=source_selector,json=sourceSelector,proto3" json:"source_selector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Routes               []*Destination    `protobuf:"bytes,2,rep,name=routes,proto3" json:"routes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Match) Reset()         { *m = Match{} }
func (m *Match) String() string { return proto.CompactTextString(m) }
func (*Match) ProtoMessage()    {}
func (*Match) Descriptor() ([]byte, []int) {
	return fileDescriptor_41af05d40a615591, []int{1}
}

func (m *Match) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Match.Unmarshal(m, b)
}
func (m *Match) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Match.Marshal(b, m, deterministic)
}
func (m *Match) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Match.Merge(m, src)
}
func (m *Match) XXX_Size() int {
	return xxx_messageInfo_Match.Size(m)
}
func (m *Match) XXX_DiscardUnknown() {
	xxx_messageInfo_Match.DiscardUnknown(m)
}

var xxx_messageInfo_Match proto.InternalMessageInfo

func (m *Match) GetSourceSelector() map[string]string {
	if m != nil {
		return m.SourceSelector
	}
	return nil
}

func (m *Match) GetRoutes() []*Destination {
	if m != nil {
		return m.Routes
	}
	return nil
}

type Destination struct {
	DestinationSelector  map[string]string `protobuf:"bytes,1,rep,name=destination_selector,json=destinationSelector,proto3" json:"destination_selector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Weight               uint32            `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Destination) Reset()         { *m = Destination{} }
func (m *Destination) String() string { return proto.CompactTextString(m) }
func (*Destination) ProtoMessage()    {}
func (*Destination) Descriptor() ([]byte, []int) {
	return fileDescriptor_41af05d40a615591, []int{2}
}

func (m *Destination) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Destination.Unmarshal(m, b)
}
func (m *Destination) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Destination.Marshal(b, m, deterministic)
}
func (m *Destination) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Destination.Merge(m, src)
}
func (m *Destination) XXX_Size() int {
	return xxx_messageInfo_Destination.Size(m)
}
func (m *Destination) XXX_DiscardUnknown() {
	xxx_messageInfo_Destination.DiscardUnknown(m)
}

var xxx_messageInfo_Destination proto.InternalMessageInfo

func (m *Destination) GetDestinationSelector() map[string]string {
	if m != nil {
		return m.DestinationSelector
	}
	return nil
}

func (m *Destination) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

type NetworkServiceManager struct {
	Name                 string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Url                  string               `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	ExpirationTime       *timestamp.Timestamp `protobuf:"bytes,3,opt,name=expiration_time,json=expirationTime,proto3" json:"expiration_time,omitempty"`
	State                string               `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *NetworkServiceManager) Reset()         { *m = NetworkServiceManager{} }
func (m *NetworkServiceManager) String() string { return proto.CompactTextString(m) }
func (*NetworkServiceManager) ProtoMessage()    {}
func (*NetworkServiceManager) Descriptor() ([]byte, []int) {
	return fileDescriptor_41af05d40a615591, []int{3}
}

func (m *NetworkServiceManager) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkServiceManager.Unmarshal(m, b)
}
func (m *NetworkServiceManager) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkServiceManager.Marshal(b, m, deterministic)
}
func (m *NetworkServiceManager) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkServiceManager.Merge(m, src)
}
func (m *NetworkServiceManager) XXX_Size() int {
	return xxx_messageInfo_NetworkServiceManager.Size(m)
}
func (m *NetworkServiceManager) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkServiceManager.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkServiceManager proto.InternalMessageInfo

func (m *NetworkServiceManager) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NetworkServiceManager) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *NetworkServiceManager) GetExpirationTime() *timestamp.Timestamp {
	if m != nil {
		return m.ExpirationTime
	}
	return nil
}

func (m *NetworkServiceManager) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

type NetworkServiceEndpoint struct {
	Name                      string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Payload                   string            `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	NetworkServiceName        string            `protobuf:"bytes,3,opt,name=network_service_name,json=networkServiceName,proto3" json:"network_service_name,omitempty"`
	NetworkServiceManagerName string            `protobuf:"bytes,4,opt,name=network_service_manager_name,json=networkServiceManagerName,proto3" json:"network_service_manager_name,omitempty"`
	Labels                    map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	State                     string            `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}          `json:"-"`
	XXX_unrecognized          []byte            `json:"-"`
	XXX_sizecache             int32             `json:"-"`
}

func (m *NetworkServiceEndpoint) Reset()         { *m = NetworkServiceEndpoint{} }
func (m *NetworkServiceEndpoint) String() string { return proto.CompactTextString(m) }
func (*NetworkServiceEndpoint) ProtoMessage()    {}
func (*NetworkServiceEndpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_41af05d40a615591, []int{4}
}

func (m *NetworkServiceEndpoint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkServiceEndpoint.Unmarshal(m, b)
}
func (m *NetworkServiceEndpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkServiceEndpoint.Marshal(b, m, deterministic)
}
func (m *NetworkServiceEndpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkServiceEndpoint.Merge(m, src)
}
func (m *NetworkServiceEndpoint) XXX_Size() int {
	return xxx_messageInfo_NetworkServiceEndpoint.Size(m)
}
func (m *NetworkServiceEndpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkServiceEndpoint.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkServiceEndpoint proto.InternalMessageInfo

func (m *NetworkServiceEndpoint) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NetworkServiceEndpoint) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *NetworkServiceEndpoint) GetNetworkServiceName() string {
	if m != nil {
		return m.NetworkServiceName
	}
	return ""
}

func (m *NetworkServiceEndpoint) GetNetworkServiceManagerName() string {
	if m != nil {
		return m.NetworkServiceManagerName
	}
	return ""
}

func (m *NetworkServiceEndpoint) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *NetworkServiceEndpoint) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

type FindNetworkServiceRequest struct {
	NetworkServiceName   string   `protobuf:"bytes,1,opt,name=network_service_name,json=networkServiceName,proto3" json:"network_service_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindNetworkServiceRequest) Reset()         { *m = FindNetworkServiceRequest{} }
func (m *FindNetworkServiceRequest) String() string { return proto.CompactTextString(m) }
func (*FindNetworkServiceRequest) ProtoMessage()    {}
func (*FindNetworkServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_41af05d40a615591, []int{5}
}

func (m *FindNetworkServiceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindNetworkServiceRequest.Unmarshal(m, b)
}
func (m *FindNetworkServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindNetworkServiceRequest.Marshal(b, m, deterministic)
}
func (m *FindNetworkServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindNetworkServiceRequest.Merge(m, src)
}
func (m *FindNetworkServiceRequest) XXX_Size() int {
	return xxx_messageInfo_FindNetworkServiceRequest.Size(m)
}
func (m *FindNetworkServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindNetworkServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindNetworkServiceRequest proto.InternalMessageInfo

func (m *FindNetworkServiceRequest) GetNetworkServiceName() string {
	if m != nil {
		return m.NetworkServiceName
	}
	return ""
}

type FindNetworkServiceResponse struct {
	Payload                 string                            `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	NetworkService          *NetworkService                   `protobuf:"bytes,2,opt,name=network_service,json=networkService,proto3" json:"network_service,omitempty"`
	NetworkServiceManagers  map[string]*NetworkServiceManager `protobuf:"bytes,3,rep,name=network_service_managers,json=networkServiceManagers,proto3" json:"network_service_managers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NetworkServiceEndpoints []*NetworkServiceEndpoint         `protobuf:"bytes,4,rep,name=network_service_endpoints,json=networkServiceEndpoints,proto3" json:"network_service_endpoints,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}                          `json:"-"`
	XXX_unrecognized        []byte                            `json:"-"`
	XXX_sizecache           int32                             `json:"-"`
}

func (m *FindNetworkServiceResponse) Reset()         { *m = FindNetworkServiceResponse{} }
func (m *FindNetworkServiceResponse) String() string { return proto.CompactTextString(m) }
func (*FindNetworkServiceResponse) ProtoMessage()    {}
func (*FindNetworkServiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_41af05d40a615591, []int{6}
}

func (m *FindNetworkServiceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindNetworkServiceResponse.Unmarshal(m, b)
}
func (m *FindNetworkServiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindNetworkServiceResponse.Marshal(b, m, deterministic)
}
func (m *FindNetworkServiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindNetworkServiceResponse.Merge(m, src)
}
func (m *FindNetworkServiceResponse) XXX_Size() int {
	return xxx_messageInfo_FindNetworkServiceResponse.Size(m)
}
func (m *FindNetworkServiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindNetworkServiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindNetworkServiceResponse proto.InternalMessageInfo

func (m *FindNetworkServiceResponse) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *FindNetworkServiceResponse) GetNetworkService() *NetworkService {
	if m != nil {
		return m.NetworkService
	}
	return nil
}

func (m *FindNetworkServiceResponse) GetNetworkServiceManagers() map[string]*NetworkServiceManager {
	if m != nil {
		return m.NetworkServiceManagers
	}
	return nil
}

func (m *FindNetworkServiceResponse) GetNetworkServiceEndpoints() []*NetworkServiceEndpoint {
	if m != nil {
		return m.NetworkServiceEndpoints
	}
	return nil
}

type NSERegistration struct {
	NetworkService         *NetworkService         `protobuf:"bytes,1,opt,name=network_service,json=networkService,proto3" json:"network_service,omitempty"`
	NetworkServiceManager  *NetworkServiceManager  `protobuf:"bytes,2,opt,name=network_service_manager,json=networkServiceManager,proto3" json:"network_service_manager,omitempty"`
	NetworkServiceEndpoint *NetworkServiceEndpoint `protobuf:"bytes,3,opt,name=network_service_endpoint,json=networkServiceEndpoint,proto3" json:"network_service_endpoint,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                `json:"-"`
	XXX_unrecognized       []byte                  `json:"-"`
	XXX_sizecache          int32                   `json:"-"`
}

func (m *NSERegistration) Reset()         { *m = NSERegistration{} }
func (m *NSERegistration) String() string { return proto.CompactTextString(m) }
func (*NSERegistration) ProtoMessage()    {}
func (*NSERegistration) Descriptor() ([]byte, []int) {
	return fileDescriptor_41af05d40a615591, []int{7}
}

func (m *NSERegistration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NSERegistration.Unmarshal(m, b)
}
func (m *NSERegistration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NSERegistration.Marshal(b, m, deterministic)
}
func (m *NSERegistration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSERegistration.Merge(m, src)
}
func (m *NSERegistration) XXX_Size() int {
	return xxx_messageInfo_NSERegistration.Size(m)
}
func (m *NSERegistration) XXX_DiscardUnknown() {
	xxx_messageInfo_NSERegistration.DiscardUnknown(m)
}

var xxx_messageInfo_NSERegistration proto.InternalMessageInfo

func (m *NSERegistration) GetNetworkService() *NetworkService {
	if m != nil {
		return m.NetworkService
	}
	return nil
}

func (m *NSERegistration) GetNetworkServiceManager() *NetworkServiceManager {
	if m != nil {
		return m.NetworkServiceManager
	}
	return nil
}

func (m *NSERegistration) GetNetworkServiceEndpoint() *NetworkServiceEndpoint {
	if m != nil {
		return m.NetworkServiceEndpoint
	}
	return nil
}

type RemoveNSERequest struct {
	NetworkServiceEndpointName string   `protobuf:"bytes,1,opt,name=network_service_endpoint_name,json=networkServiceEndpointName,proto3" json:"network_service_endpoint_name,omitempty"`
	XXX_NoUnkeyedLiteral       struct{} `json:"-"`
	XXX_unrecognized           []byte   `json:"-"`
	XXX_sizecache              int32    `json:"-"`
}

func (m *RemoveNSERequest) Reset()         { *m = RemoveNSERequest{} }
func (m *RemoveNSERequest) String() string { return proto.CompactTextString(m) }
func (*RemoveNSERequest) ProtoMessage()    {}
func (*RemoveNSERequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_41af05d40a615591, []int{8}
}

func (m *RemoveNSERequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveNSERequest.Unmarshal(m, b)
}
func (m *RemoveNSERequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveNSERequest.Marshal(b, m, deterministic)
}
func (m *RemoveNSERequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveNSERequest.Merge(m, src)
}
func (m *RemoveNSERequest) XXX_Size() int {
	return xxx_messageInfo_RemoveNSERequest.Size(m)
}
func (m *RemoveNSERequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveNSERequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveNSERequest proto.InternalMessageInfo

func (m *RemoveNSERequest) GetNetworkServiceEndpointName() string {
	if m != nil {
		return m.NetworkServiceEndpointName
	}
	return ""
}

type NetworkServiceEndpointList struct {
	NetworkServiceEndpoints []*NetworkServiceEndpoint `protobuf:"bytes,1,rep,name=network_service_endpoints,json=networkServiceEndpoints,proto3" json:"network_service_endpoints,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}                  `json:"-"`
	XXX_unrecognized        []byte                    `json:"-"`
	XXX_sizecache           int32                     `json:"-"`
}

func (m *NetworkServiceEndpointList) Reset()         { *m = NetworkServiceEndpointList{} }
func (m *NetworkServiceEndpointList) String() string { return proto.CompactTextString(m) }
func (*NetworkServiceEndpointList) ProtoMessage()    {}
func (*NetworkServiceEndpointList) Descriptor() ([]byte, []int) {
	return fileDescriptor_41af05d40a615591, []int{9}
}

func (m *NetworkServiceEndpointList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkServiceEndpointList.Unmarshal(m, b)
}
func (m *NetworkServiceEndpointList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkServiceEndpointList.Marshal(b, m, deterministic)
}
func (m *NetworkServiceEndpointList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkServiceEndpointList.Merge(m, src)
}
func (m *NetworkServiceEndpointList) XXX_Size() int {
	return xxx_messageInfo_NetworkServiceEndpointList.Size(m)
}
func (m *NetworkServiceEndpointList) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkServiceEndpointList.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkServiceEndpointList proto.InternalMessageInfo

func (m *NetworkServiceEndpointList) GetNetworkServiceEndpoints() []*NetworkServiceEndpoint {
	if m != nil {
		return m.NetworkServiceEndpoints
	}
	return nil
}

func init() {
	proto.RegisterType((*NetworkService)(nil), "registry.NetworkService")
	proto.RegisterType((*Match)(nil), "registry.Match")
	proto.RegisterMapType((map[string]string)(nil), "registry.Match.SourceSelectorEntry")
	proto.RegisterType((*Destination)(nil), "registry.Destination")
	proto.RegisterMapType((map[string]string)(nil), "registry.Destination.DestinationSelectorEntry")
	proto.RegisterType((*NetworkServiceManager)(nil), "registry.NetworkServiceManager")
	proto.RegisterType((*NetworkServiceEndpoint)(nil), "registry.NetworkServiceEndpoint")
	proto.RegisterMapType((map[string]string)(nil), "registry.NetworkServiceEndpoint.LabelsEntry")
	proto.RegisterType((*FindNetworkServiceRequest)(nil), "registry.FindNetworkServiceRequest")
	proto.RegisterType((*FindNetworkServiceResponse)(nil), "registry.FindNetworkServiceResponse")
	proto.RegisterMapType((map[string]*NetworkServiceManager)(nil), "registry.FindNetworkServiceResponse.NetworkServiceManagersEntry")
	proto.RegisterType((*NSERegistration)(nil), "registry.NSERegistration")
	proto.RegisterType((*RemoveNSERequest)(nil), "registry.RemoveNSERequest")
	proto.RegisterType((*NetworkServiceEndpointList)(nil), "registry.NetworkServiceEndpointList")
}

func init() { proto.RegisterFile("registry.proto", fileDescriptor_41af05d40a615591) }

var fileDescriptor_41af05d40a615591 = []byte{
	// 844 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0x5d, 0x6e, 0xf3, 0x44,
	0x14, 0xd5, 0x24, 0x6d, 0x3e, 0xbe, 0x6b, 0x48, 0xaa, 0x69, 0x9b, 0x3a, 0x06, 0x44, 0x94, 0xf2,
	0x10, 0x24, 0x70, 0x2a, 0x03, 0x12, 0xf0, 0x52, 0xfa, 0x93, 0xf2, 0x40, 0x12, 0x24, 0x07, 0x84,
	0x54, 0x21, 0x45, 0x4e, 0x32, 0x24, 0x26, 0xfe, 0xc3, 0x33, 0x4e, 0x71, 0x77, 0xc0, 0x0e, 0x58,
	0x04, 0x7b, 0xe0, 0x91, 0xd7, 0xee, 0x83, 0x4d, 0x20, 0xcf, 0x38, 0xb1, 0x9d, 0xd8, 0x4d, 0xa3,
	0xbe, 0xb4, 0xf3, 0x73, 0xef, 0xb9, 0x77, 0xce, 0x39, 0xbe, 0x2d, 0x54, 0x7d, 0x32, 0x33, 0x29,
	0xf3, 0x43, 0xd5, 0xf3, 0x5d, 0xe6, 0xe2, 0x77, 0x56, 0x7b, 0x45, 0xf6, 0x58, 0xe8, 0x11, 0xda,
	0x21, 0xb6, 0xc7, 0x42, 0xf1, 0x53, 0xc4, 0x28, 0xcd, 0xf8, 0x86, 0x99, 0x36, 0xa1, 0xcc, 0xb0,
	0xbd, 0x64, 0x25, 0x22, 0x5a, 0x26, 0x54, 0x07, 0x84, 0x3d, 0xb8, 0xfe, 0x62, 0x48, 0xfc, 0xa5,
	0x39, 0x21, 0x18, 0xc3, 0x81, 0x63, 0xd8, 0x44, 0x46, 0x4d, 0xd4, 0x7e, 0xab, 0xf3, 0x35, 0x96,
	0xe1, 0x8d, 0x67, 0x84, 0x96, 0x6b, 0x4c, 0xe5, 0x12, 0x3f, 0x5e, 0x6d, 0xf1, 0x27, 0xf0, 0xc6,
	0x36, 0xd8, 0x64, 0x4e, 0xa8, 0x5c, 0x6e, 0x96, 0xdb, 0x92, 0x56, 0x53, 0xd7, 0x7d, 0xf6, 0xa3,
	0x0b, 0x7d, 0x75, 0xdf, 0xfa, 0x17, 0xc1, 0x21, 0x3f, 0xc2, 0x3d, 0xa8, 0x51, 0x37, 0xf0, 0x27,
	0x64, 0x44, 0x89, 0x45, 0x26, 0xcc, 0xf5, 0x65, 0xc4, 0x93, 0xcf, 0x37, 0x92, 0xd5, 0x21, 0x0f,
	0x1b, 0xc6, 0x51, 0x5d, 0x87, 0xf9, 0xa1, 0x5e, 0xa5, 0x99, 0x43, 0xfc, 0x19, 0x54, 0x7c, 0x37,
	0x60, 0x84, 0xca, 0x25, 0x0e, 0x72, 0x9a, 0x80, 0xdc, 0x12, 0xca, 0x4c, 0xc7, 0x60, 0xa6, 0xeb,
	0xe8, 0x71, 0x90, 0x72, 0x05, 0xc7, 0x39, 0xa8, 0xf8, 0x08, 0xca, 0x0b, 0x12, 0xc6, 0xaf, 0x8e,
	0x96, 0xf8, 0x04, 0x0e, 0x97, 0x86, 0x15, 0x90, 0xf8, 0xc9, 0x62, 0xf3, 0x4d, 0xe9, 0x2b, 0xd4,
	0x7a, 0x42, 0x20, 0xa5, 0xa0, 0xb1, 0x01, 0x27, 0xd3, 0x64, 0xbb, 0xf9, 0x28, 0x35, 0xb7, 0x9f,
	0xf4, 0x3a, 0xfb, 0xbe, 0xe3, 0xe9, 0xf6, 0x0d, 0xae, 0x43, 0xe5, 0x81, 0x98, 0xb3, 0x39, 0xe3,
	0xdd, 0xbc, 0xa7, 0xc7, 0x3b, 0xe5, 0x0e, 0xe4, 0x22, 0xa0, 0xbd, 0x9e, 0xf4, 0x17, 0x82, 0xd3,
	0xac, 0x11, 0xfa, 0x86, 0x63, 0xcc, 0x88, 0x9f, 0xeb, 0x87, 0x23, 0x28, 0x07, 0xbe, 0x15, 0xa3,
	0x44, 0x4b, 0x7c, 0x03, 0x35, 0xf2, 0x87, 0x67, 0xfa, 0x82, 0x81, 0xc8, 0x65, 0x72, 0xb9, 0x89,
	0xda, 0x92, 0xa6, 0xa8, 0x33, 0xd7, 0x9d, 0x59, 0x44, 0xf8, 0x6d, 0x1c, 0xfc, 0xaa, 0xfe, 0xb8,
	0xb2, 0xa0, 0x5e, 0x4d, 0x52, 0xa2, 0xc3, 0xa8, 0x3d, 0xca, 0x0c, 0x46, 0xe4, 0x03, 0xd1, 0x1e,
	0xdf, 0xb4, 0x9e, 0x4a, 0x50, 0xcf, 0xb6, 0xd6, 0x75, 0xa6, 0x9e, 0x6b, 0x3a, 0x6c, 0x4f, 0xaf,
	0x5e, 0xc0, 0x89, 0x23, 0x70, 0x46, 0x54, 0x00, 0x8d, 0x78, 0x76, 0x99, 0x87, 0x61, 0x27, 0x53,
	0x63, 0x10, 0x61, 0x5d, 0xc2, 0x07, 0x9b, 0x19, 0xb6, 0xa0, 0x45, 0x64, 0x8a, 0x3e, 0x1b, 0x4e,
	0x1e, 0x71, 0x1c, 0xe0, 0x16, 0x2a, 0x96, 0x31, 0x26, 0x16, 0x95, 0x0f, 0xb9, 0x17, 0x3e, 0x4d,
	0xbc, 0x90, 0xff, 0x24, 0xb5, 0xc7, 0xc3, 0x85, 0x13, 0xe2, 0xdc, 0x84, 0x97, 0x4a, 0x8a, 0x17,
	0xe5, 0x6b, 0x90, 0x52, 0xc1, 0x7b, 0xa9, 0xdd, 0x87, 0xc6, 0x9d, 0xe9, 0x4c, 0xb3, 0x2d, 0xe8,
	0xe4, 0xf7, 0x80, 0x50, 0x56, 0x48, 0x13, 0x2a, 0xa2, 0xa9, 0xf5, 0x4f, 0x19, 0x94, 0x3c, 0x3c,
	0xea, 0xb9, 0x0e, 0xcd, 0x28, 0x82, 0xb2, 0x8a, 0x5c, 0x41, 0x6d, 0xa3, 0x14, 0xef, 0x55, 0xd2,
	0xe4, 0x22, 0x9e, 0xf4, 0x6a, 0xb6, 0x3e, 0x7e, 0x04, 0xb9, 0x40, 0xa2, 0xd5, 0x44, 0xfa, 0x36,
	0xc1, 0x2a, 0x6e, 0x52, 0xcd, 0x35, 0x7f, 0xac, 0x43, 0x3d, 0x57, 0x60, 0x8a, 0x7f, 0x81, 0xc6,
	0x66, 0x6d, 0x12, 0xeb, 0x48, 0xe5, 0x03, 0x5e, 0xbc, 0xb9, 0x4b, 0x70, 0xfd, 0xcc, 0xc9, 0x3d,
	0xa7, 0xca, 0x6f, 0xf0, 0xfe, 0x33, 0x4d, 0xe5, 0xe8, 0xfd, 0x65, 0x5a, 0x6f, 0x49, 0xfb, 0xa8,
	0xa8, 0x74, 0x8c, 0x93, 0x36, 0xc4, 0x9f, 0x25, 0xa8, 0x0d, 0x86, 0x5d, 0x5d, 0x24, 0x88, 0xa9,
	0x96, 0x23, 0x0e, 0xda, 0x53, 0x9c, 0x9f, 0xe1, 0xac, 0x40, 0x9c, 0x97, 0xf6, 0x78, 0x9a, 0x4b,
	0x3d, 0xbe, 0xdf, 0x56, 0x7d, 0xc5, 0x7c, 0x3c, 0x77, 0x76, 0x13, 0x5f, 0xcf, 0x27, 0xbe, 0xf5,
	0x13, 0x1c, 0xe9, 0xc4, 0x76, 0x97, 0x84, 0x13, 0x22, 0xbe, 0x89, 0x2b, 0xf8, 0xb0, 0xa8, 0x5e,
	0xfa, 0xe3, 0x50, 0xf2, 0x21, 0xf9, 0x47, 0xf2, 0x08, 0x4a, 0x7e, 0x23, 0x3d, 0x93, 0xb2, 0xe7,
	0xad, 0x84, 0x5e, 0x69, 0x25, 0xed, 0x3f, 0xb4, 0x39, 0x42, 0x63, 0xa5, 0x43, 0x7c, 0x03, 0x92,
	0x58, 0x13, 0x7f, 0x30, 0xec, 0xe2, 0x46, 0xaa, 0x48, 0xd6, 0x0f, 0x4a, 0xf1, 0x15, 0xfe, 0x1e,
	0x6a, 0xd7, 0x81, 0xb5, 0x78, 0x35, 0x50, 0x1b, 0x5d, 0x20, 0x7c, 0x09, 0x6f, 0xd7, 0xfc, 0x63,
	0x25, 0x89, 0xdd, 0x14, 0x45, 0xa9, 0x6f, 0xfd, 0x69, 0xe9, 0x46, 0xff, 0xfb, 0x68, 0x8f, 0x70,
	0x96, 0x7d, 0xec, 0xad, 0x49, 0x27, 0xee, 0x92, 0xf8, 0x21, 0x1e, 0x01, 0xde, 0x9e, 0x01, 0xf8,
	0xfc, 0xf9, 0x09, 0x21, 0xaa, 0x7d, 0xfc, 0x92, 0x31, 0xa2, 0xfd, 0x8d, 0x40, 0x1a, 0x50, 0x7b,
	0x4d, 0xef, 0x0f, 0x69, 0x7a, 0xfb, 0x78, 0x97, 0xdf, 0x95, 0x5d, 0x01, 0xb8, 0x07, 0xef, 0x7e,
	0x47, 0xd8, 0x5a, 0x5a, 0x5c, 0x40, 0x42, 0xba, 0xdd, 0x62, 0xdb, 0x5d, 0x7f, 0x71, 0xaf, 0xcd,
	0x4c, 0x36, 0x0f, 0xc6, 0xea, 0xc4, 0xb5, 0x3b, 0xb1, 0x7d, 0x62, 0x03, 0xda, 0x84, 0xce, 0x3b,
	0x86, 0x67, 0x76, 0xbc, 0xc5, 0x8c, 0xff, 0x5e, 0x01, 0x8e, 0x2b, 0xbc, 0xd6, 0xe7, 0xff, 0x07,
	0x00, 0x00, 0xff, 0xff, 0x3c, 0x17, 0x96, 0x3b, 0x93, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NetworkServiceRegistryClient is the client API for NetworkServiceRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetworkServiceRegistryClient interface {
	RegisterNSE(ctx context.Context, in *NSERegistration, opts ...grpc.CallOption) (*NSERegistration, error)
	BulkRegisterNSE(ctx context.Context, opts ...grpc.CallOption) (NetworkServiceRegistry_BulkRegisterNSEClient, error)
	RemoveNSE(ctx context.Context, in *RemoveNSERequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type networkServiceRegistryClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkServiceRegistryClient(cc grpc.ClientConnInterface) NetworkServiceRegistryClient {
	return &networkServiceRegistryClient{cc}
}

func (c *networkServiceRegistryClient) RegisterNSE(ctx context.Context, in *NSERegistration, opts ...grpc.CallOption) (*NSERegistration, error) {
	out := new(NSERegistration)
	err := c.cc.Invoke(ctx, "/registry.NetworkServiceRegistry/RegisterNSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceRegistryClient) BulkRegisterNSE(ctx context.Context, opts ...grpc.CallOption) (NetworkServiceRegistry_BulkRegisterNSEClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NetworkServiceRegistry_serviceDesc.Streams[0], "/registry.NetworkServiceRegistry/BulkRegisterNSE", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkServiceRegistryBulkRegisterNSEClient{stream}
	return x, nil
}

type NetworkServiceRegistry_BulkRegisterNSEClient interface {
	Send(*NSERegistration) error
	Recv() (*NSERegistration, error)
	grpc.ClientStream
}

type networkServiceRegistryBulkRegisterNSEClient struct {
	grpc.ClientStream
}

func (x *networkServiceRegistryBulkRegisterNSEClient) Send(m *NSERegistration) error {
	return x.ClientStream.SendMsg(m)
}

func (x *networkServiceRegistryBulkRegisterNSEClient) Recv() (*NSERegistration, error) {
	m := new(NSERegistration)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *networkServiceRegistryClient) RemoveNSE(ctx context.Context, in *RemoveNSERequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/registry.NetworkServiceRegistry/RemoveNSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkServiceRegistryServer is the server API for NetworkServiceRegistry service.
type NetworkServiceRegistryServer interface {
	RegisterNSE(context.Context, *NSERegistration) (*NSERegistration, error)
	BulkRegisterNSE(NetworkServiceRegistry_BulkRegisterNSEServer) error
	RemoveNSE(context.Context, *RemoveNSERequest) (*empty.Empty, error)
}

// UnimplementedNetworkServiceRegistryServer can be embedded to have forward compatible implementations.
type UnimplementedNetworkServiceRegistryServer struct {
}

func (*UnimplementedNetworkServiceRegistryServer) RegisterNSE(ctx context.Context, req *NSERegistration) (*NSERegistration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNSE not implemented")
}
func (*UnimplementedNetworkServiceRegistryServer) BulkRegisterNSE(srv NetworkServiceRegistry_BulkRegisterNSEServer) error {
	return status.Errorf(codes.Unimplemented, "method BulkRegisterNSE not implemented")
}
func (*UnimplementedNetworkServiceRegistryServer) RemoveNSE(ctx context.Context, req *RemoveNSERequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNSE not implemented")
}

func RegisterNetworkServiceRegistryServer(s *grpc.Server, srv NetworkServiceRegistryServer) {
	s.RegisterService(&_NetworkServiceRegistry_serviceDesc, srv)
}

func _NetworkServiceRegistry_RegisterNSE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NSERegistration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceRegistryServer).RegisterNSE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.NetworkServiceRegistry/RegisterNSE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceRegistryServer).RegisterNSE(ctx, req.(*NSERegistration))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServiceRegistry_BulkRegisterNSE_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NetworkServiceRegistryServer).BulkRegisterNSE(&networkServiceRegistryBulkRegisterNSEServer{stream})
}

type NetworkServiceRegistry_BulkRegisterNSEServer interface {
	Send(*NSERegistration) error
	Recv() (*NSERegistration, error)
	grpc.ServerStream
}

type networkServiceRegistryBulkRegisterNSEServer struct {
	grpc.ServerStream
}

func (x *networkServiceRegistryBulkRegisterNSEServer) Send(m *NSERegistration) error {
	return x.ServerStream.SendMsg(m)
}

func (x *networkServiceRegistryBulkRegisterNSEServer) Recv() (*NSERegistration, error) {
	m := new(NSERegistration)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _NetworkServiceRegistry_RemoveNSE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveNSERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceRegistryServer).RemoveNSE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.NetworkServiceRegistry/RemoveNSE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceRegistryServer).RemoveNSE(ctx, req.(*RemoveNSERequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetworkServiceRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "registry.NetworkServiceRegistry",
	HandlerType: (*NetworkServiceRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterNSE",
			Handler:    _NetworkServiceRegistry_RegisterNSE_Handler,
		},
		{
			MethodName: "RemoveNSE",
			Handler:    _NetworkServiceRegistry_RemoveNSE_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BulkRegisterNSE",
			Handler:       _NetworkServiceRegistry_BulkRegisterNSE_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "registry.proto",
}

// NetworkServiceDiscoveryClient is the client API for NetworkServiceDiscovery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetworkServiceDiscoveryClient interface {
	FindNetworkService(ctx context.Context, in *FindNetworkServiceRequest, opts ...grpc.CallOption) (*FindNetworkServiceResponse, error)
}

type networkServiceDiscoveryClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkServiceDiscoveryClient(cc grpc.ClientConnInterface) NetworkServiceDiscoveryClient {
	return &networkServiceDiscoveryClient{cc}
}

func (c *networkServiceDiscoveryClient) FindNetworkService(ctx context.Context, in *FindNetworkServiceRequest, opts ...grpc.CallOption) (*FindNetworkServiceResponse, error) {
	out := new(FindNetworkServiceResponse)
	err := c.cc.Invoke(ctx, "/registry.NetworkServiceDiscovery/FindNetworkService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkServiceDiscoveryServer is the server API for NetworkServiceDiscovery service.
type NetworkServiceDiscoveryServer interface {
	FindNetworkService(context.Context, *FindNetworkServiceRequest) (*FindNetworkServiceResponse, error)
}

// UnimplementedNetworkServiceDiscoveryServer can be embedded to have forward compatible implementations.
type UnimplementedNetworkServiceDiscoveryServer struct {
}

func (*UnimplementedNetworkServiceDiscoveryServer) FindNetworkService(ctx context.Context, req *FindNetworkServiceRequest) (*FindNetworkServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindNetworkService not implemented")
}

func RegisterNetworkServiceDiscoveryServer(s *grpc.Server, srv NetworkServiceDiscoveryServer) {
	s.RegisterService(&_NetworkServiceDiscovery_serviceDesc, srv)
}

func _NetworkServiceDiscovery_FindNetworkService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindNetworkServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceDiscoveryServer).FindNetworkService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.NetworkServiceDiscovery/FindNetworkService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceDiscoveryServer).FindNetworkService(ctx, req.(*FindNetworkServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetworkServiceDiscovery_serviceDesc = grpc.ServiceDesc{
	ServiceName: "registry.NetworkServiceDiscovery",
	HandlerType: (*NetworkServiceDiscoveryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindNetworkService",
			Handler:    _NetworkServiceDiscovery_FindNetworkService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "registry.proto",
}

// NsmRegistryClient is the client API for NsmRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NsmRegistryClient interface {
	RegisterNSM(ctx context.Context, in *NetworkServiceManager, opts ...grpc.CallOption) (*NetworkServiceManager, error)
	GetEndpoints(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*NetworkServiceEndpointList, error)
}

type nsmRegistryClient struct {
	cc grpc.ClientConnInterface
}

func NewNsmRegistryClient(cc grpc.ClientConnInterface) NsmRegistryClient {
	return &nsmRegistryClient{cc}
}

func (c *nsmRegistryClient) RegisterNSM(ctx context.Context, in *NetworkServiceManager, opts ...grpc.CallOption) (*NetworkServiceManager, error) {
	out := new(NetworkServiceManager)
	err := c.cc.Invoke(ctx, "/registry.NsmRegistry/RegisterNSM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nsmRegistryClient) GetEndpoints(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*NetworkServiceEndpointList, error) {
	out := new(NetworkServiceEndpointList)
	err := c.cc.Invoke(ctx, "/registry.NsmRegistry/GetEndpoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NsmRegistryServer is the server API for NsmRegistry service.
type NsmRegistryServer interface {
	RegisterNSM(context.Context, *NetworkServiceManager) (*NetworkServiceManager, error)
	GetEndpoints(context.Context, *empty.Empty) (*NetworkServiceEndpointList, error)
}

// UnimplementedNsmRegistryServer can be embedded to have forward compatible implementations.
type UnimplementedNsmRegistryServer struct {
}

func (*UnimplementedNsmRegistryServer) RegisterNSM(ctx context.Context, req *NetworkServiceManager) (*NetworkServiceManager, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNSM not implemented")
}
func (*UnimplementedNsmRegistryServer) GetEndpoints(ctx context.Context, req *empty.Empty) (*NetworkServiceEndpointList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEndpoints not implemented")
}

func RegisterNsmRegistryServer(s *grpc.Server, srv NsmRegistryServer) {
	s.RegisterService(&_NsmRegistry_serviceDesc, srv)
}

func _NsmRegistry_RegisterNSM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkServiceManager)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NsmRegistryServer).RegisterNSM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.NsmRegistry/RegisterNSM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NsmRegistryServer).RegisterNSM(ctx, req.(*NetworkServiceManager))
	}
	return interceptor(ctx, in, info, handler)
}

func _NsmRegistry_GetEndpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NsmRegistryServer).GetEndpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.NsmRegistry/GetEndpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NsmRegistryServer).GetEndpoints(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _NsmRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "registry.NsmRegistry",
	HandlerType: (*NsmRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterNSM",
			Handler:    _NsmRegistry_RegisterNSM_Handler,
		},
		{
			MethodName: "GetEndpoints",
			Handler:    _NsmRegistry_GetEndpoints_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "registry.proto",
}
